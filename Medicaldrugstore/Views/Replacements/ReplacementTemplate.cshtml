@model Medicaldrugstore.Models.Replacement

@{
    Layout = null;
}

@using (Html.BeginForm("SaveReplacement", "Replacements", FormMethod.Post, new { id = "frmReplacement" }))
{
    <div class="create-item">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ReplacementId)

        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SourceOrganizationId, htmlAttributes: new { @class = "control-label col-sm-4 align-right border-box" })
            <div class="col-sm-8 border-box">
                @(Html.Kendo().ComboBoxFor(model => model.SourceOrganizationId)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.StartsWith)
                .BindTo(ViewBag.vbOrganizations)
                .HtmlAttributes(new { required = "required", validationmessage = "Դաշտը լրացված չէ", data_value_primitive = true })
                )
                <span class="k-invalid-msg" data-for="SourceOrganizationId"></span>
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ConfirmOrganizationId, htmlAttributes: new { @class = "control-label col-sm-4 align-right border-box" })
            <div class="col-sm-8 border-box">
                @(Html.Kendo().ComboBoxFor(model => model.ConfirmOrganizationId)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.StartsWith)
                .BindTo(ViewBag.vbOrganizations)
                .HtmlAttributes(new { required = "required", validationmessage = "Դաշտը լրացված չէ", data_value_primitive = true })
                )
                <span class="k-invalid-msg" data-for="ConfirmOrganizationId"></span>
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.DestinationOrganizationId, htmlAttributes: new { @class = "control-label col-sm-4 align-right border-box" })
            <div class="col-sm-8 border-box">
                @(Html.Kendo().ComboBoxFor(model => model.DestinationOrganizationId)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.StartsWith)
                .BindTo(ViewBag.vbOrganizations)
                .HtmlAttributes(new { required = "required", validationmessage = "Դաշտը լրացված չէ", data_value_primitive = true })
                )
                <span class="k-invalid-msg" data-for="DestinationOrganizationId"></span>
            </div>
        </div>
        <div class="clear"></div>

        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReplacementBaseId, htmlAttributes: new { @class = "control-label col-sm-4 align-right border-box" })
            <div class="col-sm-8 border-box">
                @(Html.Kendo().ComboBoxFor(model => model.ReplacementBaseId)
              .DataTextField("Text")
              .DataValueField("Value")
              .Filter(FilterType.StartsWith)
              .BindTo(ViewBag.vbReplacementBases)
              .HtmlAttributes(new { required = "required", data_required_msg = "Դաշտը պարտադիր է", data_value_primitive = true })
                )
                <span class="k-invalid-msg" data-for="ReplacementBaseId"></span>
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReplacementBaseDate, htmlAttributes: new { @class = "control-label col-sm-4 align-right border-box" })
            <div class="col-sm-8 border-box">
                @Html.EditorFor(model => model.ReplacementBaseDate, new { htmlAttributes = new { required = "required", validationmessage = "Դաշտը լրացված չէ", @class = "form-control" } })
                <span class="k-invalid-msg" data-for="ReplacementBaseDate"></span>
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReplacementBaseText, htmlAttributes: new { @class = "control-label col-sm-4 align-right border-box" })
            <div class="col-sm-8 border-box">
                @Html.EditorFor(model => model.ReplacementBaseText, new { htmlAttributes = new { @class = "form-control" } })
                <span class="k-invalid-msg" data-for="ReplacementBaseText"></span>
            </div>
        </div>
        <div class="clear"></div>

        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReplacementProduct, new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-6">
                @(Html.Kendo().Grid<Medicaldrugstore.Models.ReplacementProduct>()
                       .Name("ReplacementProductTemplate")
                       .Columns(columns =>
                       {
                           columns.Bound(model => model.ReplacementProductId).Hidden();
                           columns.Bound(model => model.ReplacementId).Hidden();
                           columns.ForeignKey(model => model.ProductId, (List<SelectListItem>) ViewBag.vbProducts, "Value", "Text").EditorTemplateName("Product");
                           columns.Bound(model => model.Quantity);
                           columns.Command(commands =>
                           {
                               commands.Destroy().Text(" ");
                           }).Title(" ").Width(70);
                       })
                           .ToolBar(toolbar =>
                           {
                               toolbar.Create().Text("Նոր");
                           })
                           .Editable(editable => editable.Mode(GridEditMode.InCell))
                           .DataSource(dataSource => dataSource
                               .Ajax()
                               .Batch(true)
                               //.PageSize(5)
                               .Read(read => read.Action("ReadProducts", "Replacements", new { id = @Model.ReplacementId }))
                           .Model(model =>
                           {
                               model.Id(p => p.ReplacementId);
                           }
                           )
                           )
                            .Scrollable()
                            .Resizable(resize => resize.Columns(true))
                            .Reorderable(reorder => reorder.Columns(true))
                            //.Pageable()
                            .Sortable()
                )
            </div>
        </div>


        <div class="form-group margin-10-0">
            <div class="col-xs-4 border-box"></div>
            <div class="col-xs-8 border-box align-right">
                <button id="rtReplacementTemplateSave" class="k-button"><i class="glyphicon glyphicon-floppy-disk"></i> @Resources.General_Save</button>
                <button id="rtReplacementTemplateCancel" class="k-button"><i class="glyphicon glyphicon-off"></i> @Resources.General_Close</button>
            </div>
        </div>

    </div>
}


<script>
    $(document).ready(function () {
        $("#rtReplacementTemplateCancel")
            .click(function () {
                $(this).closest(".k-window-content").data("kendoWindow").close();
                return false;
            });

        $("#rtReplacementTemplateSave")
            .click(function (e) {

                var errTmplt = '<div class="k-widget k-tooltip k-tooltip-validation" style="margin:0.5em; padding:3px 5px;"><span class="fa fa-exclamation-triangle"></span> #=message#<div class="k-callout k-callout-n"></div></div>';
                var validator = $("#frmReplacement").kendoValidator({
                    errorTemplate: errTmplt
                }).data("kendoValidator");
                if (!validator.validate()) {
                    $("#errormssg").html("<span class='fa fa-exclamation-triangle'></span> @GeneralResources.FieldsRequired");
                    return false;
                }

                var item = new Object();
                item.replacementId = '@Model.ReplacementId';
                item.sourceOrganizationId = document.getElementById("SourceOrganizationId").value;
                item.confirmOrganizationId = document.getElementById("ConfirmOrganizationId").value;
                item.destinationOrganizationId = document.getElementById("DestinationOrganizationId").value;
                item.replacementBaseId = document.getElementById("ReplacementBaseId").value;
                item.replacementBaseDate = document.getElementById("ReplacementBaseDate").value;
                item.replacementBaseText = document.getElementById("ReplacementBaseText").value;

                
                var ReplacementProductGrid = $("#ReplacementProductTemplate").data("kendoGrid"), parameterMap = ReplacementProductGrid.dataSource.transport.parameterMap;
                
                var currentItemData = ReplacementProductGrid.dataSource.data();
                var rProducts = [];
               
                for (var i = 0; i < currentItemData.length; i++) {
                    var itm = new Object();
                    if (currentItemData[i].isNew()) {
                        itm.ReplacementProductId = currentItemData[i].ReplacementProductId;
                        itm.ReplacementId = currentItemData[i].ReplacementId;
                        itm.ProductId = currentItemData[i].ProductId;
                        itm.Quantity = currentItemData[i].Quantity;
                        itm.RecordStatus = String(1);
                        rProducts.push(itm);
                    } else if (currentItemData[i].dirty) {
                        itm.ReplacementProductId = currentItemData[i].ReplacementProductId;
                        itm.ReplacementId = currentItemData[i].ReplacementId;
                        itm.ProductId = currentItemData[i].ProductId;
                        itm.Quantity = currentItemData[i].Quantity;
                        itm.RecordStatus = String(2);
                        rProducts.push(itm);
                    }
                }

                for (var i = 0; i < ReplacementProductGrid.dataSource._destroyed.length; i++) {
                    var itm = new Object();
                    itm.ReplacementProductId = ReplacementProductGrid.dataSource._destroyed[i].ReplacementProductId;
                    itm.ReplacementId = ReplacementProductGrid.dataSource._destroyed[i].ReplacementId;
                    itm.ProductId = ReplacementProductGrid.dataSource._destroyed[i].ProductId;
                    itm.Quantity = ReplacementProductGrid.dataSource._destroyed[i].Quantity;
                    itm.RecordStatus = String(3);
                    rProducts.push(itm);
                }
                item.ReplacementProduct = rProducts;

                

                var rt = false;
                var dt;
                var q = $.ajax({
                    url: '@Url.Action("SaveReplacement", "Replacements")',
                    dataType: "json",
                    type: "POST",
                    data: JSON.stringify({ replacement: item }),
                    contentType: "application/json; charset=utf-8",
                    async: false,
                    success: function (data) {
                        dt = data;
                        rt = true;
                    },
                    error: function (xhr) {
                        dt = xhr;
                        rt = false;
                    }
                });
                if (rt == true) {
                    if (dt.success != true) {
                        /*Այստեղ իրականացվում է սերվերից վերադարձված սխալի ցուցադրման գործառույթը:
                        Անհրաժեշտ է որ alert-ի փոխարեն կարմիր գույնով ցուցադրվի սխալը:
                        Այդ սխալը պետք է տեղակայված լինի մուտքային վերջին դաշտի և հրահանգների արանքում:*/
                        alert(JSON.stringify(dt.responseText));
                    }
                    else {
                        $(this).closest(".k-window-content").data("kendoWindow").close();
                    }
                }
                else {
                    alert(JSON.stringify("Unknown error occured."));
                }
                return false;
            });
    });
</script>
