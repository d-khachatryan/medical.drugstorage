@model Medicaldrugstore.Models.Retransfer

@{
    Layout = null;
}

<script>
    function onSenderSelect(e) {
        var dataItem = this.dataItem(e.item.index());
        var idd = dataItem.OrganizationId;
        var q = $.ajax({
            url: '@Url.Action("OrganizationInfo", "Retransfers")',
            dataType: "json",
            type: "GET",
            data: { id: idd },
            async: true,
            success: function (data) {
                dt = data.Data;
                rt = true;
                if (dt != null) {
                    $("#SenderTinLabel").html(dt[0].TinNumber);
                    $("#SenderNameLabel").html(dt[0].OrganizationName);
                    $("#SenderLocationLabel").html(dt[0].OrganizationLocation);
                    $("#SenderBankNameLabel").html(dt[0].BankName);
                    $("#SenderSupplyLocationLabel").html(dt[0].DeliveryLocation);
                    $("#SenderAccountNumberLabel").html(dt[0].BankAccountNumber);
                    $("#SenderHeadNameLabel").html(dt[0].HeadName);
                    $("#SenderAccountantNameLabel").html(dt[0].AccountantName);
                    $("#SenderResponsibleNameLabel").html(dt[0].ResponsibleName);

                    $("#SenderTin").val(dt[0].TinNumber);
                    $("#SenderName").val(dt[0].OrganizationName);
                    $("#SenderLocation").val(dt[0].OrganizationLocation);
                    $("#SenderBankName").val(dt[0].BankName);
                    $("#SenderSupplyLocation").val(dt[0].DeliveryLocation);
                    $("#SenderAccountNumber").val(dt[0].BankAccountNumber);
                    $("#SenderHeadName").val(dt[0].HeadName);
                    $("#SenderAccountantName").val(dt[0].AccountantName);
                    $("#SenderResponsibleName").val(dt[0].ResponsibleName);
                }
            },
            error: function (xhr) {
                dt = xhr;
                rt = false;
            }
        });
    }
    function onReceiverSelect(e) {
        var dataItem = this.dataItem(e.item.index());
        var idd = dataItem.OrganizationId;
        var q = $.ajax({
            url: '@Url.Action("OrganizationInfo", "Retransfers")',
            dataType: "json",
            type: "GET",
            data: { id: idd },
            async: true,
            success: function (data) {
                dt = data.Data;
                rt = true;
                if (dt != null) {
                    $("#ReceiverTinLabel").html(dt[0].TinNumber);
                    $("#ReceiverNameLabel").html(dt[0].OrganizationName);
                    $("#ReceiverLocationLabel").html(dt[0].OrganizationLocation);
                    $("#ReceiverBankNameLabel").html(dt[0].BankName);
                    $("#ReceiverSupplyLocationLabel").html(dt[0].DeliveryLocation);
                    $("#ReceiverAccountNumberLabel").html(dt[0].BankAccountNumber);
                    $("#ReceiverHeadNameLabel").html(dt[0].HeadName);
                    $("#ReceiverAccountantNameLabel").html(dt[0].AccountantName);
                    $("#ReceiverResponsibleNameLabel").html(dt[0].ResponsibleName);

                    $("#ReceiverTin").val(dt[0].TinNumber);
                    $("#ReceiverName").val(dt[0].OrganizationName);
                    $("#ReceiverLocation").val(dt[0].OrganizationLocation);
                    $("#ReceiverBankName").val(dt[0].BankName);
                    $("#ReceiverSupplyLocation").val(dt[0].DeliveryLocation);
                    $("#ReceiverAccountNumber").val(dt[0].BankAccountNumber);
                    $("#ReceiverHeadName").val(dt[0].HeadName);
                    $("#ReceiverAccountantName").val(dt[0].AccountantName);
                    $("#ReceiverResponsibleName").val(dt[0].ResponsibleName);
                }
            },
            error: function (xhr) {
                dt = xhr;
                rt = false;
            }
        });
    }
</script>
@*@using (Html.BeginForm("SaveRetransfer", "Retransfers", FormMethod.Post, new { id = "frmRetransfer" }))
{*@
<div id="frmRetransfer" class="container" style="max-width:720px;">
    @Html.HiddenFor(model => model.RetransferId)
    @*<fieldset class="margin-10 create-item">
        <legend> @Resources.Transfer_Sender</legend>
        <div class="col-sm-12 margin-5-0 border-box">
            @Html.LabelFor(model => model.SenderOrganizationId, htmlAttributes: new { @class = "control-label" })
            @(Html.Kendo().ComboBoxFor(model => model.SenderOrganizationId)
                .DataTextField("OrganizationName")
                .DataValueField("OrganizationId")
                .Placeholder("Ընտերլ հիմնարկը ․․․")
                .Filter(FilterType.StartsWith)
                .HtmlAttributes(new { style = "width:100%;" })
                .Events(e =>
                {
                    e.Select("onSenderSelect");
                })
                //.BindTo(ViewBag.vbOrganizations)
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetSenderOrganizations", "Transfers");

                    });
                })
            )
            @Html.ValidationMessageFor(model => model.SenderOrganizationId, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-12 margin-5-0 border-box">
            <table class="table table-striped details" style="margin-bottom:0;">
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderTin, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "SenderTin", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderLocation, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "SenderLocation", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderSupplyLocation, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "SenderSupplyLocation", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderBankName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "SenderBankName", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderAccountNumber, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "SenderAccountNumber", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderHeadName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "SenderHeadName", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderAccountantName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "SenderAccountantName", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "SenderName", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderResponsibleName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "SenderResponsibleName", size = 10 })</td>
                </tr>
            </table>
        </div>
    </fieldset>
    <fieldset class="margin-10 create-item">
        <legend>@Resources.Transfer_Receiver</legend>
        <div class="col-sm-12 margin-5-0 border-box">
            @Html.LabelFor(model => model.ReceiverOrganizationId, htmlAttributes: new { @class = "control-label" })
            @(Html.Kendo().ComboBoxFor(model => model.ReceiverOrganizationId)
                .DataTextField("OrganizationName")
                .DataValueField("OrganizationId")
                .Placeholder("Ընտերլ հիմնարկը ․․․")
                .Filter(FilterType.StartsWith)
                .HtmlAttributes(new { style = "width:100%;" })
                .Events(e =>
                {
                    e.Select("onReceiverSelect");
                })


                //.BindTo(ViewBag.vbOrganizations)


                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetReceiverOrganizations", "Transfers");

                    });
                })
            )
            @Html.ValidationMessageFor(model => model.ReceiverOrganizationId, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-12 margin-5-0 border-box">
            <table class="table table-striped details" style="margin-bottom:0;">
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverTin, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "ReceiverTin", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverLocation, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "ReceiverLocation", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverSupplyLocation, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "ReceiverSupplyLocation", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverBankName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "ReceiverBankName", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverAccountNumber, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "ReceiverAccountNumber", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverHeadName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "ReceiverHeadName", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverAccountantName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "ReceiverAccountantName", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "ReceiverName", size = 10 })</td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverResponsibleName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">@Html.Label(" ", new { id = "ReceiverResponsibleName", size = 10 })</td>
                </tr>
            </table>
        </div>
    </fieldset>*@
    <fieldset class="margin-10 create-item">
        <legend> @Resources.Transfer_Sender</legend>
        <div class="col-sm-12 margin-5-0 border-box">
            @Html.LabelFor(model => model.SenderOrganizationId, htmlAttributes: new { @class = "control-label" })
            @(Html.Kendo().ComboBoxFor(model => model.SenderOrganizationId)
                .DataTextField("OrganizationName")
                .DataValueField("OrganizationId")
                .Placeholder("Ընտերլ հիմնարկը ․․․")
                .Filter(FilterType.StartsWith)
                .HtmlAttributes(new { style = "width:100%;" })
                .Events(e =>
                {
                    e.Select("onSenderSelect");
                })
                //.BindTo(ViewBag.vbOrganizations)
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetSenderOrganizations", "Transfers");

                    });
                })
            )
            @Html.ValidationMessageFor(model => model.SenderOrganizationId, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-12 margin-5-0 border-box">
            <table class="table table-striped details" style="margin-bottom:0;">
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderTin, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "SenderTinLabel", size = 10 })
                        @Html.HiddenFor(model => model.SenderTin)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderLocation, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "SenderLocationLabel", size = 10 })
                        @Html.HiddenFor(model => model.SenderLocation)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderSupplyLocation, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "SenderSupplyLocationLabel", size = 10 })
                        @Html.HiddenFor(model => model.SenderSupplyLocation)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderBankName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "SenderBankNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.SenderBankName)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderAccountNumber, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "SenderAccountNumberLabel", size = 10 })
                        @Html.HiddenFor(model => model.SenderAccountNumber)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderHeadName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "SenderHeadNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.SenderHeadName)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderAccountantName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "SenderAccountantNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.SenderAccountantName)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "SenderNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.SenderName)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.SenderResponsibleName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "SenderResponsibleNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.SenderResponsibleName)
                    </td>
                </tr>
            </table>
        </div>
    </fieldset>
    <fieldset class="margin-10 create-item">
        <legend>@Resources.Transfer_Receiver</legend>
        <div class="col-sm-12 margin-5-0 border-box">
            @Html.LabelFor(model => model.ReceiverOrganizationId, htmlAttributes: new { @class = "control-label" })
            @(Html.Kendo().ComboBoxFor(model => model.ReceiverOrganizationId)
                .DataTextField("OrganizationName")
                .DataValueField("OrganizationId")
                .Placeholder("Ընտերլ հիմնարկը ․․․")
                .Filter(FilterType.StartsWith)
                .HtmlAttributes(new { style = "width:100%;" })
                .Events(e =>
                {
                    e.Select("onReceiverSelect");
                })


                //.BindTo(ViewBag.vbOrganizations)


                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetReceiverOrganizations", "Transfers");

                    });
                })
            )
            @Html.ValidationMessageFor(model => model.ReceiverOrganizationId, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-12 margin-5-0 border-box">
            <table class="table table-striped details" style="margin-bottom:0;">
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverTin, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "ReceiverTinLabel", size = 10 })
                        @Html.HiddenFor(model => model.ReceiverTin)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverLocation, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "ReceiverLocationLabel", size = 10 })
                        @Html.HiddenFor(model => model.ReceiverLocation)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverSupplyLocation, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "ReceiverSupplyLocationLabel", size = 10 })
                        @Html.HiddenFor(model => model.ReceiverSupplyLocation)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverBankName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "ReceiverBankNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.ReceiverBankName)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverAccountNumber, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "ReceiverAccountNumberLabel", size = 10 })
                        @Html.HiddenFor(model => model.ReceiverAccountNumber)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverHeadName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "ReceiverHeadNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.ReceiverHeadName)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverAccountantName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "ReceiverAccountantNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.ReceiverAccountantName)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "ReceiverNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.ReceiverName)
                    </td>
                </tr>
                <tr>
                    <td class="col-xs-6">@Html.LabelFor(model => model.ReceiverResponsibleName, htmlAttributes: new { @class = "control-label" })</td>
                    <td class="col-xs-6">
                        @Html.Label(" ", new { id = "ReceiverResponsibleNameLabel", size = 10 })
                        @Html.HiddenFor(model => model.ReceiverResponsibleName)
                    </td>
                </tr>
            </table>
        </div>
    </fieldset>
    <fieldset class="margin-10 create-item">
        <div class="col-sm-12 margin-5-0 border-box">
            @Html.LabelFor(model => model.BaseDocumentId, htmlAttributes: new { @class = "control-label" })
            @(Html.Kendo().ComboBoxFor(model => model.BaseDocumentId)
                .DataTextField("BaseDocumentName")
                .DataValueField("BaseDocumentId")
                .Placeholder("Ընտերլ հիմքը ․․․")
                .Filter(FilterType.StartsWith)
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetBaseDocuments", "Transfers");

                    });
                })
                .HtmlAttributes(new { data_value_primitive = true })
            )
            @Html.ValidationMessageFor(model => model.BaseDocumentId, "", new { @class = "text-danger" })
        </div>
        <div class="clear"></div>
        <div class="col-sm-12 margin-5-0 border-box">
            @Html.LabelFor(model => model.DealInfo, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.DealInfo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DealInfo, "", new { @class = "text-danger" })
        </div>
        <div class="clear"></div>
        <div class="col-sm-12 margin-5-0 border-box">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label" })
            @Html.TextAreaFor(model => model.Comment, new { @class = "k-textbox" })
            @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
        </div>
        <div class="clear"></div>
    </fieldset>

    @*<fieldset class="margin-10 create-item">
        <legend>Վերադարձնող</legend>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderOrganizationId, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @(Html.Kendo().ComboBoxFor(model => model.SenderOrganizationId)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.StartsWith)
                //.HtmlAttributes(new { style = "width:100%;" })
                .Events(e =>
                {
                    e.Select("onSenderSelect");
                })
                .BindTo(ViewBag.vbOrganizations)
                )
                <br />
                <span class="k-invalid-msg vldmsg" data-for="SenderOrganizationId"></span>
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderTin, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.SenderTin, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.SenderTin, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.SenderName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.SenderName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderLocation, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.SenderLocation, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.SenderLocation, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderBankName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.SenderBankName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.SenderBankName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderSupplyLocation, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.SenderSupplyLocation, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.SenderSupplyLocation, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderAccountNumber, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.SenderAccountNumber, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.SenderAccountNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderHeadName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.SenderHeadName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.SenderHeadName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderAccountantName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.SenderAccountantName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.SenderAccountantName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.SenderResponsibleName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.SenderResponsibleName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.SenderResponsibleName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
    </fieldset>
    <fieldset class="margin-10 create-item">
        <legend>Ստացող</legend>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverOrganizationId, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @(Html.Kendo().ComboBoxFor(model => model.ReceiverOrganizationId)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.StartsWith)
                .Events(e =>
                {
                    e.Select("onReceiverSelect");
                })
                .BindTo(ViewBag.vbOrganizations)
                )
                <br />
                <span class="k-invalid-msg vldmsg" data-for="ReceiverOrganizationId"></span>
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverTin, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.ReceiverTin, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.ReceiverTin, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.ReceiverName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.ReceiverName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverLocation, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.ReceiverLocation, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.ReceiverLocation, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverBankName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.ReceiverBankName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.ReceiverBankName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverSupplyLocation, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.ReceiverSupplyLocation, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.ReceiverSupplyLocation, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverAccountNumber, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.ReceiverAccountNumber, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.ReceiverAccountNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverHeadName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.ReceiverHeadName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.ReceiverHeadName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverAccountantName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.ReceiverAccountantName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.ReceiverAccountantName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="form-group margin-5-0">
            @Html.LabelFor(model => model.ReceiverResponsibleName, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
            <div class="col-sm-7">
                @Html.EditorFor(model => model.ReceiverResponsibleName, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.ReceiverResponsibleName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
    </fieldset>
<fieldset class="margin-10 create-item">
    <div class="form-group margin-5-0">
        @Html.LabelFor(model => model.BaseDocumentId, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
        <div class="col-sm-7">
            @(Html.Kendo().ComboBoxFor(model => model.BaseDocumentId)
              .DataTextField("Text")
              .DataValueField("Value")
              .Filter(FilterType.StartsWith)
              .BindTo(ViewBag.vbBaseDocuments)
              .HtmlAttributes(new { data_value_primitive = true })
                  )
            <br/>
            <span class="k-invalid-msg vldmsg" data-for="BaseDocumentId"></span>
        </div>
    </div>
    <div class="clear"></div>
    <div class="form-group margin-5-0">
        @Html.LabelFor(model => model.DealInfo, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
        <div class="col-sm-7">
            @Html.EditorFor(model => model.DealInfo, new { htmlAttributes = new { @class = "form-control" } })
            <br/>
            @Html.ValidationMessageFor(model => model.DealInfo, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="clear"></div>
    <div class="form-group margin-5-0">
        @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-sm-4 align-right" })
        <div class="col-sm-7">
            @Html.TextAreaFor(model => model.Comment, new { @class = "k-textbox" })
            <br/>
            @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="clear"></div>
</fieldset>*@

    <div>
        <div class="form-group col-sm-8 margin-10-0 border-box">
            <span id="errormssg"></span>
        </div>
        <div class="form-group col-sm-4 border-box margin-10-0 align-right">
            <button id="rtSave" class="k-button"><i class="glyphicon glyphicon-floppy-disk"></i> @Resources.General_Save</button>
            <button id="rtCancel" class="k-button"><i class="glyphicon glyphicon-off"></i> @Resources.General_Close</button>
        </div>
    </div>
</div>
@*}*@

<script>
    $(document).ready(function () {
        $("#rtCancel")
            .click(function () {
                $(this).closest(".k-window-content").data("kendoWindow").close();
                return false;
            });
        $("#rtSave")
            .click(function (e) {
                var errTmplt = '<div class="k-widget k-tooltip k-tooltip-validation" style="margin:0.5em; padding:3px 5px;"><span class="fa fa-exclamation-triangle"></span> #=message#<div class="k-callout k-callout-n"></div></div>';
                var validator = $("#frmRetransfer").kendoValidator({
                    errorTemplate: errTmplt
                }).data("kendoValidator");
                if (!validator.validate()) {
                    $("#errormssg").html("<span class='fa fa-exclamation-triangle'></span> @GeneralResources.FieldsRequired");
                    return false;
                }
                //var SenderOrganizationId = $("#SenderOrganizationId").data("kendoComboBox").input;
                //var ReceiverOrganizationId = $("#BaseDocumentId").data("kendoComboBox").input;
                //var BaseDocumentId = $("#SenderOrganizationId").data("kendoComboBox").input;
                //var validator = $("#frmRetransfer").kendoValidator().data("kendoValidator");

                //if (!validator.validate()) {
                //    SenderOrganizationId.addClass("k-invalid");
                //    ReceiverOrganizationId.addClass("k-invalid");
                //    BaseDocumentId.addClass("k-invalid");
                //    return false;
                //}

                //SenderOrganizationId.removeClass("k-invalid");
                //ReceiverOrganizationId.removeClass("k-invalid");
                //BaseDocumentId.removeClass("k-invalid");

                var item = new Object();

                item.retransferId = document.getElementById("RetransferId").value;

                item.senderOrganizationId = document.getElementById("SenderOrganizationId").value;
                item.senderTin = document.getElementById("SenderTin").value;
                item.senderName = document.getElementById("SenderName").value;
                item.senderLocation = document.getElementById("SenderLocation").value;
                item.senderBankName = document.getElementById("SenderBankName").value;
                item.senderSupplyLocation = document.getElementById("SenderSupplyLocation").value;
                item.senderAccountNumber = document.getElementById("SenderAccountNumber").value;
                item.senderHeadName = document.getElementById("SenderHeadName").value;
                item.senderAccountantName = document.getElementById("SenderAccountantName").value;
                item.senderResponsibleName = document.getElementById("SenderResponsibleName").value;

                item.receiverOrganizationId = document.getElementById("ReceiverOrganizationId").value;
                item.receiverTin = document.getElementById("ReceiverTin").value;
                item.receiverName = document.getElementById("ReceiverName").value;
                item.receiverLocation = document.getElementById("ReceiverLocation").value;
                item.receiverBankName = document.getElementById("ReceiverBankName").value;
                item.receiverSupplyLocation = document.getElementById("ReceiverSupplyLocation").value;
                item.receiverAccountNumber = document.getElementById("ReceiverAccountNumber").value;
                item.receiverHeadName = document.getElementById("ReceiverHeadName").value;
                item.receiverAccountantName = document.getElementById("ReceiverAccountantName").value;
                item.receiverResponsibleName = document.getElementById("ReceiverResponsibleName").value;

                item.baseDocumentId = document.getElementById("BaseDocumentId").value;                
                item.dealInfo = document.getElementById("DealInfo").value;
                item.comment = document.getElementById("Comment").value;

                //put here validation code

                var rt = false;
                var dt;
                var q = $.ajax({
                    url: '@Url.Action("SaveRetransfer", "Retransfers")',
                    dataType: "json",
                    type: "POST",
                    data: JSON.stringify({ retransfer: item }),
                    contentType: "application/json; charset=utf-8",
                    async: false,
                    success: function (data) {
                        dt = data;
                        rt = true;
                    },
                    error: function (xhr) {
                        dt = xhr;
                        rt = false;
                    }
                });
                if (rt == true) {
                    if (dt.success != true) {
                        alert(JSON.stringify(dt.responseText));
                        return false;
                    }
                    else {
                        $(this).closest(".k-window-content").data("kendoWindow").close();
                        return false;
                    }
                }
                else {
                    alert(JSON.stringify("Unknown error occured."));
                    return false;
                }

            });
    });
</script>
